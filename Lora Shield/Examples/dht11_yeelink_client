/*
  LoRa Simple Client for Arduino :
  Support Devices: LoRa Shield + Arduino 
  
  Example sketch showing how to create a simple messageing client, 
  with the RH_RF95 class. RH_RF95 class does not provide for addressing or
  reliability, so you should only use RH_RF95 if you do not need the higher
  level messaging abilities.

  It is designed to work with the other example LoRa Simple Server

  modified 16 11 2016
  by Edwin Chen <support@dragino.com>
  Dragino Technology Co., Limited
*/
#include <dht.h>
#include <SPI.h>
#include <RH_RF95.h>
dht DHT;
#define DHT11_PIN A0
String datastring1="";            //Declare a string to store the temperautre data
String datastring2="";        //Declare a string to store the humidity data
String datastring3="";        //Declare a string to concatenate humidity or temperature data

// Singleton instance of the radio driver
RH_RF95 rf95;
float frequency = 868.0;
unsigned int count = 1;
char dht_info[50] = {"\0"};
char dht_hum[50] = {"\0"};
char dht_tem[50]= {"\0"}; 

float info;
float info2,info3;

void setup() 
{
   Serial.begin(9600);
  while (!Serial) ; // Wait for serial port to be available
  Serial.println("LoRa End Node Example  --");
  Serial.println("DHT11 Sensor");
    
  if (!rf95.init())
    Serial.println("init failed");
  // Setup ISM frequency
  rf95.setFrequency(frequency);
  rf95.setTxPower(13);
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on
}

/*Because Yeelink is a single-sensor single-group data upload, so if you upload the humidity ,put the temperature function commented out .The upload temperature is the same.*/

/*void dhtHum()
{
   
      double  humidity = DHT.read11(DHT11_PIN);        //Humidity detection
      datastring2 +=dtostrf(DHT.humidity,2,1,dht_hum);
      strcat(dht_info,dht_hum);

}*/

void dhtTem()
{
     
     double  temperature = DHT.read11(DHT11_PIN);    //Temperature detection
     datastring1 +=dtostrf(DHT.temperature,2,1,dht_tem);        
     strcat(dht_info,dht_tem);
    
     
}


void loop()
{
   // dhtHum()
    dhtTem();
    Serial.print("###########    ");
    Serial.print("COUNT=");
    Serial.print(count);
    Serial.println("    ###########");
   //Serial.println(" The humidity(%): ");     
   //Serial.println(dht_hum);                  //Print the humidity
    Serial.println(" The temperature(C): ");  
    Serial.print(dht_tem);                   //Print the temperature
    Serial.println(" ");
    count++;
    char data[50] = {0};
    int dataLength = 7;

    data[0] = dht_info[0];
    data[1] = dht_info[1];
    data[2] = dht_info[2];
    data[3] = dht_info[3];
    data[4] = dht_info[4];
  
    
    Serial.print("Data to be sent: ");
    int i;
    for(i = 0;i < dataLength; i++)
    {
        
        Serial.print(data[i],HEX);
       
    }
    Serial.println();
  unsigned char sendBuf[50]={0};



    for(i = 0;i < dataLength;i++)

    {

        sendBuf[i] = data[i] ;

    }

        Serial.println();

  
  rf95.send(sendBuf, dataLength);//Send LoRa Data

  
  rf95.waitPacketSent();
  // Now wait for a reply
  uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
  uint8_t len = sizeof(buf);
  Serial.println((char)dht_info);

  if (rf95.waitAvailableTimeout(3000))
  { 
    // Should be a reply message for us now   
    if (rf95.recv(buf, &len))
   {
      Serial.print("got reply: ");
      Serial.println((char*)buf);
      Serial.print("RSSI: ");
      Serial.println(rf95.lastRssi(), DEC);    
    }
    else
    {
      Serial.println("recv failed");
      rf95.send(dht_info, strlen((char*)dht_info));
    }
  }
  else
  {
    Serial.println("No reply, is LoRa server running?");
    rf95.send(dht_info, strlen((char*)dht_info));//resend data
  }
  delay(5000);
}
